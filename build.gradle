plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.3'
    id 'io.spring.dependency-management' version '1.1.0'
    id "maven-publish"
    id 'jacoco'
    id "com.github.spotbugs" version "5.0.14"
    id "io.freefair.lombok" version "8.0.1"
    // DONE Enable checkstyle and PMD. Fix all the relevant issues.
    id "checkstyle"
    id "pmd"
}

// Project Metadata
group = 'com.audition'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'
targetCompatibility = '17'


// Applied code analysis rules
apply from: 'config/code-analysis.gradle'
apply plugin: 'checkstyle'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

// Dependency versions
ext {
    set('springCloudVersion', "2022.0.1")
    set('logbackVersion', "1.4.5")
    set('slf4jVersion', "2.0.5")
    set('springdocVersion', "2.0.2")
}

dependencies {

    // DONE Clean up unused dependencies. Add comments on consideration on any improvements you made.
    // Removed duplicate 'spring-cloud-starter-config' dependency
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.cloud:spring-cloud-starter-config"
    implementation "org.springframework.boot:spring-boot-starter-webflux"
    implementation "org.springframework.boot:spring-boot-starter-aop"

    // Micrometer Tracing for Observability
    implementation "io.micrometer:micrometer-tracing-bridge-brave"
    implementation "io.micrometer:micrometer-tracing"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "io.micrometer:context-propagation"
    implementation "org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j"

    // OpenAPI 3.0 Documentation
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

    // Development and runtime dependencies
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    runtimeOnly "io.micrometer:micrometer-registry-prometheus"

    // Logging dependencies
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "ch.qos.logback:logback-core:${logbackVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"

    // Testing dependencies
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "io.projectreactor:reactor-test"
    testImplementation 'org.mockito:mockito-inline:5.2.0'

    // Micrometer Tracing for Observability
    implementation 'io.opentelemetry:opentelemetry-api:1.25.0'
    implementation 'io.opentelemetry:opentelemetry-sdk:1.25.0'
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp:1.25.0'


}

// Spring Cloud BOM for consistent dependency management
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// Git Hooks Configuration
task prepareGitHooks(type: Copy) {
    from "$projectDir/git-hooks"
    into "$projectDir/.git/hooks"
    include "*"
}
tasks.matching { it.name != 'prepareGitHooks' }.all { Task task -> task.dependsOn prepareGitHooks }

// JUnit Platform Configuration
tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}


jacoco {
    toolVersion = "0.8.8" // Ensure you use the latest version
}

test {
    jacoco {
        enabled = true
    }
}
jacocoTestReport {
    reports {
        xml.required = true
        html.required = true // Generates an HTML report
    }
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            'com/audition/common/exception/**',   // Exclude package
                            'com/audition/web/advice/ExceptionControllerAdvice.class',  // Exclude class
                            'com/audition/interceptor/**',
                    ])
                })
        )
    }
}



checkstyle {
    toolVersion = '10.17.0'
    //configFile = file("$rootDir/config/checkstyle/checkstyle.xml")
    configFile = rootProject.file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    configDirectory = rootProject.file("${rootProject.projectDir}/config/checkstyle")
    ignoreFailures = false
    showViolations = true
}

